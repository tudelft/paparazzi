<!DOCTYPE flight_plan SYSTEM "../flight_plan.dtd">

<flight_plan alt="30" ground_alt="0" lat0="51.917913" lon0="3.995999" max_dist_from_home="1500" name="Seal_soaring_dune" security_height="5">
  <header>
    #include "autopilot.h"
    #include "modules/datalink/datalink.h"
    #include "modules/radio_control/radio_control.h"
</header>
  <waypoints>
    <waypoint name="HOME" x="0.0" y="0.0"/>
    <waypoint name="STDBY" x="-162.1" y="39.1"/>
    <waypoint name="SOAR" x="-274.6" y="56.0"/>
    <waypoint name="H1" x="-834.7" y="127.2"/>
    <waypoint name="BACKUP" x="-300" y="60.0"/>
    <waypoint name="S1_WP" x="-219.9" y="-18.6"/>
    <waypoint name="CLIMB" x="-556.6" y="19.5"/>
    <waypoint name="GF1" x="-237.4" y="605.6"/>
    <waypoint name="GF2" x="-1080.4" y="-192.5"/>
    <waypoint name="GF3" x="16.0" y="-1024.5"/>
    <waypoint name="GF4" x="687.9" y="164.1"/>
  </waypoints>
  <sectors>
    <sector color="red" name="Geofence">
      <corner name="GF1"/>
      <corner name="GF2"/>
      <corner name="GF3"/>
      <corner name="GF4"/>
    </sector>
  </sectors>
  <exceptions>
    <!-- RC direct and AUTO1: in case of RC lost, it automatically goes into failsafe mode TODO: double check -->
    <!-- In AUTO2, if RC valid, don't throw the exceptions, except Geofence -->
    <!-- In AUTO2, RC lost but datalink and GPS valid, don't throw an exception TODO: double check // order? -->
    <!-- TODO: triple check every cases very carefully!!! (logically and NPS) -->
    <!-- TODO: also check 'do nothing' cases, make sure it does really nothing in those cases -->

    <!-- In AUTO2, No RC, No Datalink, No GPS: Stay and descend (or kill??) -->
    <exception cond="autopilot.mode == MODE_AUTO2 && radio_control.status == RC_REALLY_LOST && datalink_time > 15 && !GpsFixValid() && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="StayAndDescend"/>

    <!-- In AUTO2, RC lost and datalink lost, it is an emergency, but it can still fly if GPS is fixed: stay there for some time and descend slowly-->
    <exception cond="autopilot.mode == MODE_AUTO2 && And(radio_control.status == RC_REALLY_LOST, datalink_time > 15) && GpsFixValid() && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="StayAndDescend"/>

    <!-- In AUTO2, RC lost and GPS lost, but still have datalink then we can do something from the ground; just stay there -> descend -->
    <exception cond="autopilot.mode == MODE_AUTO2 && And(radio_control.status == RC_REALLY_LOST, !GpsFixValid()) && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="StayAndDescend"/>

    <!-- In AUTO2, Datalink lost and GPS lost: stay there -> descend after 60 sec / safety pilot takes the control -->
    <exception cond="autopilot.mode == MODE_AUTO2 && And(datalink_time > 15, !GpsFixValid()) && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="StayAndDescend"/>

    <!-- AUTO2, (outside of geofence || alt higher than 150m) && GPS fixed && (not in preparation blocks) : GEOFENCE block (go to STDBY) -->
    <exception cond="autopilot.mode == MODE_AUTO2 && Or(!InsideGeofence(GetPosX(), GetPosY()), GetPosAlt() > GetAltRef() + 150) && GpsFixValid() && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="GeoFence"/>

    <!--    AUTO2, Datalink lost, GPS valid; -->
<!--    <exception cond="autopilot.mode == MODE_AUTO2 && GpsFixValid() && datalink_time > 10  && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="ReturnStbyThrottle"/>-->

    <!--    in Auto2: GPS failure, Datalink valid -->
<!--    <exception cond="autopilot.mode == MODE_AUTO2 && !GpsFixValid()  && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="ReturnStbyThrottle"/>-->

    <!--    AUTO2, Datalink lost && RC lost, GPS valid;-->
    <!--    <exception cond="autopilot.mode == MODE_AUTO2 && GpsFixValid() && datalink_time > 10 && radio_control.status == RC_REALLY_LOST && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="ReturnStbyThrottle"/>-->
  </exceptions>

<!--  <exceptions>-->
<!--    &lt;!&ndash;    <exception cond="radio_control.status == RC_REALLY_LOST" deroute="RCFailsafe"/>&ndash;&gt;-->

<!--    &lt;!&ndash; *******ROUTE should be used instead of STDBY!!!!!!!!!********   &ndash;&gt;-->

<!--    &lt;!&ndash;    AUTO2: Datalink and GPS both fails, return NO throttle &ndash;&gt;-->
<!--    <exception cond="autopilot.mode == MODE_AUTO2 && And(datalink_time > 10, !GpsFixValid()) && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="ReturnStbyThrottle"/>-->

<!--    &lt;!&ndash;    in AUTO2: RC lost, Datalink & GPS valid; -->
<!--    &lt;!&ndash;    <exception cond="autopilot.mode == MODE_AUTO2 && radio_control.status == RC_REALLY_LOST && GpsFixValid() && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="ReturnStbyThrottle"/>&ndash;&gt;-->
<!--    &lt;!&ndash;    AUTO2, Datalink lost, GPS valid; &ndash;&gt;-->
<!--    <exception cond="autopilot.mode == MODE_AUTO2 && GpsFixValid() && datalink_time > 10  && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="ReturnStbyThrottle" />-->
<!--    &lt;!&ndash;    in Auto2: GPS failure, Datalink valid &ndash;&gt;-->
<!--    <exception cond="autopilot.mode == MODE_AUTO2 && !GpsFixValid()  && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="ReturnStbyThrottle"/>-->

<!--    &lt;!&ndash;    AUTO2, Datalink lost && RC lost, GPS valid;&ndash;&gt;-->
<!--    <exception cond="autopilot.mode == MODE_AUTO2 && GpsFixValid() && datalink_time > 10 && radio_control.status == RC_REALLY_LOST && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="ReturnStbyThrottle" />-->

<!--    &lt;!&ndash;    (outside geofence || alt higher than 150m) && GPS fixed && (not in preparation blocks) : go to Geofence block &ndash;&gt;-->
<!--    <exception cond="autopilot.mode == MODE_AUTO2 && Or(!InsideGeofence(GetPosX(), GetPosY()), GetPosAlt() > GetAltRef() + 150) && GpsFixValid() && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point'))" deroute="GeoFence"/>-->

<!--    &lt;!&ndash;    <exception cond="datalink_time > 25 && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point')) && !(nav_block == IndexOfBlock('Standby'))" deroute="route"/>&ndash;&gt;-->
<!--    &lt;!&ndash;    <exception cond="radio_control.status == RC_REALLY_LOST && !(nav_block == IndexOfBlock('Wait GPS')) && !(nav_block == IndexOfBlock('Geo init')) && !(nav_block == IndexOfBlock('Holding point')) && !(nav_block == IndexOfBlock('Standby'))" deroute="route"/>&ndash;&gt;-->
<!--  </exceptions>-->

  <!--                                            -->
  <!-- USE FORCE_FORWARD for "normal" navigations -->
  <!--                                            -->

  <blocks>
    <block name="Wait GPS">
      <call_once fun="NavKillThrottle()"/>
      <while cond="!GpsFixValid()"/>
    </block>
    <block name="Geo init">
      <while cond="LessThan(NavBlockTime(), 10)"/>
      <call_once fun="NavSetGroundReferenceHere()"/>
    </block>
    <block name="Holding point">
      <call_once fun="NavKillThrottle()"/>
      <attitude pitch="0" roll="0" throttle="0" until="FALSE" vmode="throttle"/>
    </block>
    <block name="Start Engine">
      <call_once fun="NavResurrect()"/>
      <attitude pitch="0" roll="0" throttle="0" until="FALSE" vmode="throttle"/>
    </block>
    <block name="Climb">
      <call_once fun="NavResurrect()"/>
      <go from="HOME" pitch="-70" throttle="1.0" wp="CLIMB"/>
    </block>
    <block name="SetStbyHere3D">
      <call_once fun="waypoint_set_here(WP_STDBY)"/>
      <deroute block="Standby"/>
    </block>
    <block name="SetStbyHere2D">
      <call_once fun="waypoint_set_here_2d(WP_STDBY)"/>
      <deroute block="Standby"/>
    </block>
    <block name="Standby" strip_button="Standby" strip_icon="home.png">
      <call_once fun="NavResurrect()"/>
      <call_once fun="guidance_indi_hybrid_soaring_stop()"/>
      <call_once fun="nav_set_heading_towards_waypoint(WP_H1)"/>
      <go wp="STDBY"/>
      <stay wp="STDBY"/>
    </block>
    <block name="Soaring_ON_ALL_AT_ONCE_FLOAT_HEADING" strip_button="Soar" strip_icon="target.png">
      <call_once fun="waypoint_set_here(WP_SOAR)"/>
      <call_once fun="guidance_indi_hybrid_soaring_start()"/>
      <call_once fun="guidance_indi_hybrid_soaring_set_all_flags()"/>
      <go wp="SOAR"/>
      <stay wp="SOAR"/>
    </block>
    <block name="Soaring_ON_ALL_AT_ONCE_FIXED_HEADING" strip_button="Soar" strip_icon="target.png">
      <call_once fun="nav_set_heading_towards_waypoint(WP_H1)"/>
      <call_once fun="waypoint_set_here(WP_SOAR)"/>
      <call_once fun="guidance_indi_hybrid_soaring_start()"/>
      <call_once fun="guidance_indi_hybrid_soaring_set_all_flags()"/>
      <go wp="SOAR"/>
      <call_once fun="nav_set_heading_towards_waypoint(WP_H1)"/>
      <stay wp="SOAR"/>
    </block>
    <block name="Soaring_FLOAT_HEADING" strip_button="Soar" strip_icon="target.png">
      <call_once fun="waypoint_set_here(WP_SOAR)"/>
      <call_once fun="guidance_indi_hybrid_soaring_start()"/>
      <go wp="SOAR"/>
      <stay wp="SOAR"/>
    </block>
    <block name="Soaring_FIXED_HEADING" strip_button="Soar" strip_icon="target.png">
      <call_once fun="nav_set_heading_towards_waypoint(WP_H1)"/>
      <call_once fun="waypoint_set_here(WP_SOAR)"/>
      <call_once fun="guidance_indi_hybrid_soaring_start()"/>
      <go wp="SOAR"/>
      <call_once fun="nav_set_heading_towards_waypoint(WP_H1)"/>
      <stay wp="SOAR"/>
    </block>
    <block name="STAY_WP_S1">
      <call_once fun="guidance_indi_hybrid_soaring_stop()"/>
      <call_once fun="nav_set_heading_towards_waypoint(WP_H1)"/>
      <go wp="S1_WP"/>
      <call_once fun="nav_set_heading_towards_waypoint(WP_H1)"/>
      <stay wp="S1_WP"/>
    </block>
    <block name="ReturnStbyThrottle">
      <exception cond="And(!(radio_control.status == RC_REALLY_LOST), And(InsideGeofence(GetPosX(), GetPosY()), And(MoreThan(GetPosAlt(), GetAltRef() + 20), LessThan(GetPosAlt(), GetAltRef() + 70))))" deroute="Standby"/>
      <call_once fun="guidance_indi_hybrid_soaring_stop()"/>
      <go wp="STDBY"/>
      <stay wp="STDBY"/>
    </block>
    <block name="ReturnStbyNoThrottle">
      <exception cond="And(!(radio_control.status == RC_REALLY_LOST), And(InsideGeofence(GetPosX(), GetPosY()), And(MoreThan(GetPosAlt(), GetAltRef() + 20), LessThan(GetPosAlt(), GetAltRef() + 70))))" deroute="Standby"/>
      <set value="1" var="autopilot.kill_throttle"/>
      <call_once fun="NavKillThrottle()"/>
      <stay wp="STDBY"/>
    </block>
    <block name="GeoFence">
      <call_once fun="guidance_indi_hybrid_soaring_stop()"/>
      <go wp="STDBY"/>
      <stay wp="STDBY"/>
    </block>
    <block name="StayAndDescend">
      <call_once fun="guidance_indi_hybrid_soaring_stop()"/>
      <call_once fun="waypoint_set_here(WP_STDBY)"/>
      <go wp="STDBY"/>
      <stay wp="STDBY" until="stage_time @GT 5"/>
<!--      <while cond="TRUE">-->
<!--        <go wp="STDBY"/>-->
<!--        <stay wp="STDBY" until="stage_time @GT 60"/>-->
<!--        <set var="nav_flight_altitude" value="GetPosAlt()-2"/>-->
<!--      </while>-->
      <stay climb="-0.5" vmode="climb" wp="STDBY"/>
    </block>
  </blocks>
</flight_plan>
